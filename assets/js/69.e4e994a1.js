(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{469:function(e,v,_){"use strict";_.r(v);var l=_(33),t=Object(l.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"声明文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#声明文件"}},[e._v("#")]),e._v(" 声明文件")]),e._v(" "),_("p",[e._v("当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。")]),e._v(" "),_("p",[_("a",{attrs:{href:"https://ts.xcatliu.com/basics/declaration-files.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("声明文件详细文档 参考链接"),_("OutboundLink")],1)]),e._v(" "),_("p",[e._v("全局变量的声明文件主要有以下几种语法：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("declare var")]),e._v("声明全局变量")]),e._v(" "),_("li",[_("code",[e._v("declare function")]),e._v("声明全局方法")]),e._v(" "),_("li",[_("code",[e._v("declare class")]),e._v(" 声明全局类")]),e._v(" "),_("li",[_("code",[e._v("declare enum")]),e._v("声明全局枚举类型")]),e._v(" "),_("li",[_("code",[e._v("declare namespace")]),e._v("声明（含有子属性的）全局对象")]),e._v(" "),_("li",[_("code",[e._v("interface 和 type")]),e._v(" 声明全局类型")])]),e._v(" "),_("blockquote",[_("p",[e._v("注：全局变量都是禁止修改的常量，所以大部分情况都应该使用 const 而不是 var 或 let")])]),e._v(" "),_("p",[e._v("npm 包的声明文件主要有以下几种语法：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("export")]),e._v(" 导出变量")]),e._v(" "),_("li",[_("code",[e._v("export namespace")]),e._v(" 导出（含有子属性的）对象")]),e._v(" "),_("li",[_("code",[e._v("export default")]),e._v(" ES6 默认导出")]),e._v(" "),_("li",[_("code",[e._v("export = commonjs")]),e._v(" 导出模块")])]),e._v(" "),_("p",[e._v("直接扩展全局变量:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("export as namespace UMD")]),e._v(" 库声明全局变量")])]),e._v(" "),_("p",[e._v("在 npm 包或 UMD 库中扩展全局变量：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("declare global")]),e._v(" 扩展全局变量")])]),e._v(" "),_("p",[e._v("模块插件::")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("declare module")]),e._v(" 扩展模块")])])])}),[],!1,null,null,null);v.default=t.exports}}]);